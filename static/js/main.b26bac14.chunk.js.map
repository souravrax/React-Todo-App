{"version":3,"sources":["components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","useState","text","setText","onSubmit","e","preventDefault","target","querySelector","value","handleSubmit","type","name","id","placeholder","onChange","index","todo","toggleTodo","deleteTodo","className","style","textDecoration","isComplete","onClick","TodoList","todos","map","elem","Todo","key","App","setTodo","useEffect","JSON","parse","localStorage","getItem","interactions","setInteractions","newTodo","setItem","stringify","length","fontFamily","width","height","textAlign","color","splice","background","borderRadius","padding","fontSize","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sNA2BeA,G,MAxBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACNC,mBAAS,IADH,mBACvBC,EADuB,KACjBC,EADiB,KAU9B,OACI,0BAAMC,SAAU,SAAAC,IARC,SAACA,GAClBA,EAAEC,iBACEJ,GAAMF,EAAQE,GAClBG,EAAEE,OAAOC,cAAc,SAASC,MAAQ,GACxCN,EAAQ,IAKJO,CAAaL,KAEb,2BAAOM,KAAK,OAAOC,KAAK,UAAUC,GAAG,cACjCC,YAAY,gCACZC,SAAU,SAAAV,GACNF,EAAQE,EAAEE,OAAOE,aChBtB,cAA8C,IAA3CO,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WACvC,OACI,yBAAKC,UAAU,QACX,uBAAGC,MAAO,CACNC,eAAgBL,EAAKM,WAAa,eAAiB,SACnDN,EAAKf,MACT,yBAAKkB,UAAU,WACX,4BAAQI,QAAS,kBAAMN,EAAWF,KAAlC,IAA4CC,EAAKM,WAAa,aAAe,WAA7E,KACA,4BAAQH,UAAU,SAASI,QAAS,kBAAML,EAAWH,KAArD,eCMDS,EAfE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAO1B,EAAV,EAAUA,QAASkB,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,WAA/B,OACb,yBAAKC,UAAU,aACVM,EAAMC,KAAI,SAACC,EAAMZ,GAAP,OACP,kBAACa,EAAD,CACIC,IAAKd,EACLA,MAAOA,EACPC,KAAMW,EACN5B,QAASA,EACTkB,WAAYA,EACZC,WAAYA,SC6FbY,MAjGf,WAAgB,IAAD,EACW9B,mBAAS,CAC/B,CACEC,KAAM,sBACNqB,YAAY,GAEd,CACErB,KAAM,kCACNqB,YAAY,GAEd,CACErB,KAAM,6CACNqB,YAAY,GAEd,CACErB,KAAM,kDACNqB,YAAY,GAEd,CACErB,KAAM,qCACNqB,YAAY,KApBH,mBACNN,EADM,KACAe,EADA,KAyBbC,qBAAU,WACR,IAAMP,EAAQQ,KAAKC,MAAMC,aAAaC,QAAQ,SAC9C,OACEL,EAAQN,KAET,IA9BU,MAgC2BzB,mBAAS,GAhCpC,mBAgCNqC,EAhCM,KAgCQC,EAhCR,KAkCPvC,EAAU,SAAAE,GACdqC,EAAgBD,EAAe,GAC/B,IAAME,EAAO,sBAAOvB,GAAP,CAAa,CACxBf,KAAMA,EACNqB,YAAY,KAEda,aAAaK,QAAQ,OAAQP,KAAKQ,UAAUF,IAC5CR,EAAQQ,IAoBV,OACE,oCACE,wCACA,yBAAKpB,UAAU,kBAEK,IAAhBH,EAAK0B,OAAgB,wBACnBtB,MAAO,CACLuB,WAAY,UACZC,MAAO,OACPC,OAAQ,OACRC,UAAW,SACXC,MAAO,SANU,kCAQmB,kBAAC,EAAD,CACpCtB,MAAOT,EACPjB,QAASA,EACTmB,WAxBO,SAAAH,GACjBuB,EAAgBD,EAAe,GAC/B,IAAME,EAAO,YAAOvB,GACpBuB,EAAQS,OAAOjC,EAAO,GACtBoB,aAAaK,QAAQ,OAAQP,KAAKQ,UAAUF,IAC5CR,EAAQQ,IAoBEtB,WAlCO,SAAAF,GACjBuB,EAAgBD,EAAe,GAC/B,IAAME,EAAO,YAAOvB,GACpBuB,EAAQxB,GAAOO,YAAciB,EAAQxB,GAAOO,WAC5Ca,aAAaK,QAAQ,OAAQP,KAAKQ,UAAUF,IAC5CR,EAAQQ,MAgCJ,kBAAC,EAAD,CAAUxC,QAASA,IACnB,yBAAKoB,UAAU,SAASC,MAAO,CAAEuB,WAAY,YAC3C,0BAAMvB,MAAO,CACX6B,WAAY,YAAaC,aAAc,MAAOC,QAAS,MAAOC,SAAU,QACxEL,MAAO,SACN5B,UAAU,SAHb,WAG8BH,EAAK0B,QACnC,0BAAMtB,MAAO,CACX6B,WAAY,QAASC,aAAc,MAAOC,QAAS,MAAOC,SAAU,QACpEL,MAAO,SACN5B,UAAU,SAHb,kBAGqCkB,OCtFzCgB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,gCAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,gCAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OClC/BE,I","file":"static/js/main.b26bac14.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nconst TodoForm = ({ addTodo }) => {\r\n    const [text, setText] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (text) addTodo(text);\r\n        e.target.querySelector(\"input\").value = \"\";\r\n        setText(\"\");\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={e => {\r\n            handleSubmit(e);\r\n        }}>\r\n            <input type=\"text\" name=\"newTodo\" id=\"input-field\"\r\n                placeholder=\"Add your Todo by typing in...\"\r\n                onChange={e => {\r\n                    setText(e.target.value);\r\n                }}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm;","import React from 'react'\r\n\r\n\r\n\r\nexport default ({ index, todo, toggleTodo, deleteTodo }) => {\r\n    return (\r\n        <div className=\"todo\">\r\n            <p style={{\r\n                textDecoration: todo.isComplete ? \"line-through\" : \"none\"\r\n            }}>{todo.text}</p>\r\n            <div className=\"actions\">\r\n                <button onClick={() => toggleTodo(index)}> {todo.isComplete ? \"Incomplete\" : \"Complete\"} </button>\r\n                <button className=\"delete\" onClick={() => deleteTodo(index)}> Delete </button>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todos, addTodo, toggleTodo, deleteTodo }) => (\r\n    <div className=\"todo-list\">\r\n        {todos.map((elem, index) => (\r\n            <Todo\r\n                key={index}\r\n                index={index}\r\n                todo={elem}\r\n                addTodo={addTodo}\r\n                toggleTodo={toggleTodo}\r\n                deleteTodo={deleteTodo}\r\n            />\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport './App.scss';\n\nimport TodoForm from './components/TodoForm'\nimport TodoList from './components/TodoList'\n\n\n\nfunction App() {\n  const [todo, setTodo] = useState([\n    {\n      text: \"This is a demo todo\",\n      isComplete: false\n    },\n    {\n      text: \"You can add more todo like this\",\n      isComplete: false\n    },\n    {\n      text: \"Add by entering the todo in the form below\",\n      isComplete: false\n    },\n    {\n      text: \"To complete a todo, press the 'complete' button\",\n      isComplete: true\n    },\n    {\n      text: \"To delete, press teh delete button\",\n      isComplete: false\n    }\n  ]);\n\n\n  useEffect(() => {\n    const todos = JSON.parse(localStorage.getItem('todo'));\n    return (\n      setTodo(todos)\n    )\n  }, [])\n\n  const [interactions, setInteractions] = useState(0);\n\n  const addTodo = text => {\n    setInteractions(interactions + 1);\n    const newTodo = [...todo, {\n      text: text,\n      isComplete: false\n    }];\n    localStorage.setItem(\"todo\", JSON.stringify(newTodo));\n    setTodo(newTodo);\n  }\n\n  const toggleTodo = index => {\n    setInteractions(interactions + 1);\n    const newTodo = [...todo];\n    newTodo[index].isComplete = !newTodo[index].isComplete;\n    localStorage.setItem(\"todo\", JSON.stringify(newTodo));\n    setTodo(newTodo);\n  }\n\n\n  const deleteTodo = index => {\n    setInteractions(interactions + 1);\n    const newTodo = [...todo];\n    newTodo.splice(index, 1);\n    localStorage.setItem(\"todo\", JSON.stringify(newTodo));\n    setTodo(newTodo);\n  }\n\n  return (\n    <>\n      <h1>Todo App</h1>\n      <div className=\"todo-container\">\n        {\n          todo.length === 0 ? (<h2\n            style={{\n              fontFamily: \"Poppins\",\n              width: \"100%\",\n              height: \"100%\",\n              textAlign: \"center\",\n              color: \"#fff\"\n            }}\n          >Add todo using the input below</h2>) : <TodoList\n              todos={todo}\n              addTodo={addTodo}\n              deleteTodo={deleteTodo}\n              toggleTodo={toggleTodo}\n            />\n        }\n        <TodoForm addTodo={addTodo} />\n        <div className=\"status\" style={{ fontFamily: \"Poppins\" }}>\n          <span style={{\n            background: \"orangered\", borderRadius: \"5px\", padding: \"5px\", fontSize: \"0.6em\",\n            color: \"white\"\n          }} className=\"count\">Todos : {todo.length}</span>\n          <span style={{\n            background: \"green\", borderRadius: \"5px\", padding: \"5px\", fontSize: \"0.6em\",\n            color: \"white\"\n          }} className=\"count\">Interections : {interactions}</span>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}